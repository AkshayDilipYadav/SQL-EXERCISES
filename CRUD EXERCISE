CREATE DATABASE crud_exercise;
USE crud_exercise;

-- Books table
CREATE TABLE books (
book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(100),
author VARCHAR(100),
price DECIMAL(10,2),
published_year INT
);

-- Members table
CREATE TABLE members (
member_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100),
city VARCHAR(50),
age INT
);

-- Borrowed Books table
CREATE TABLE borrowed_books (
borrow_id INT PRIMARY KEY AUTO_INCREMENT,
member_id INT,
book_id INT,
borrow_date DATE,
return_date DATE,
FOREIGN KEY (member_id) REFERENCES members(member_id),
FOREIGN KEY (book_id) REFERENCES books(book_id)
);



-- BEGINNER

-- CREATE

-- 1. Insert 5 books into books.

INSERT INTO books (title, author, price, published_year)
VALUES
('The Alchemist', 'Paulo Coelho', 300, 1988),
('1984', 'George Orwell', 250, 1949),
('Clean Code', 'Robert Martin', 600, 2008),
('Sapiens', 'Yuval Harari', 500, 2011),
('Atomic Habits', 'James Clear', 400, 2018);


-- 2. Insert 3 members into members.


INSERT INTO members (name, city, age)
VALUES
('Alice', 'Delhi', 22),
('Bob', 'Mumbai', 30),
('Charlie', 'Pune', 28);


-- READ

-- 1. Fetch all books.

SELECT * FROM books;


-- 2. Fetch books cheaper than 400.

SELECT title, price FROM books WHERE price < 400;


-- UPDATE

SET SQL_SAFE_UPDATES = 0;

-- 1. Update the price of "1984" to 275.


UPDATE books SET price = 275 WHERE title = '1984';

-- 2. Change Aliceâ€™s city to "Bangalore".

UPDATE members SET city = 'Bangalore' WHERE name = 'Alice';



-- DELETE

-- 1. Delete the book "Sapiens".


DELETE FROM books WHERE title = 'Sapiens';


-- 2. Delete a member named "Charlie".


DELETE FROM members WHERE name = 'Charlie';





-- INTERMEDIATE


-- CREATE

-- 1. Record book borrowings.


INSERT INTO borrowed_books (member_id, book_id, borrow_date, return_date)
VALUES
(1, 1, '2025-01-10', '2025-01-20'),
(1, 3, '2025-02-01', NULL),
(2, 2, '2025-02-15', '2025-03-01');


-- READ

-- 1. Fetch all borrowed books with member names.

SELECT m.name, b.title, bb.borrow_date, bb.return_date
FROM borrowed_books bb
JOIN members m ON bb.member_id = m.member_id
JOIN books b ON bb.book_id = b.book_id;


-- 2. Find books not borrowed by anyone.



SELECT title
FROM books
WHERE book_id NOT IN (SELECT book_id FROM borrowed_books);


-- UPDATE

-- 1. Mark a borrowed book as returned (set return_date).

UPDATE borrowed_books
SET return_date = '2025-03-10'
WHERE borrow_id = 2;


-- 2. Increase the price of all books published before 2000 by 10%.

UPDATE books
SET price = price * 1.10
WHERE published_year < 2000;


-- DELETE

-- 1. Delete all borrow records of "Alice".

DELETE FROM borrowed_books
WHERE member_id = (SELECT member_id FROM members WHERE name = 'Alice');

-- 2. Delete all books that no one has borrowed.

DELETE FROM books
WHERE book_id NOT IN (SELECT book_id FROM borrowed_books);









-- ADVANCED



-- CREATE



-- 1. Insert a borrowing, but prevent borrowing if the book is already borrowed and not returned.


INSERT INTO borrowed_books (member_id, book_id, borrow_date, return_date)
SELECT 2, 3, '2025-03-20', NULL
WHERE NOT EXISTS (
SELECT 1 FROM borrowed_books
WHERE book_id = 3 AND return_date IS NULL
);


-- READ

-- 1. Find top 2 most borrowed books.

SELECT b.title, COUNT(*) AS times_borrowed
FROM borrowed_books bb
JOIN books b ON bb.book_id = b.book_id
GROUP BY b.title
ORDER BY times_borrowed DESC
LIMIT 2;


-- 2. Find members who borrowed more than 1 book.

SELECT m.name, COUNT(*) AS total_borrowed
FROM borrowed_books bb
JOIN members m ON bb.member_id = m.member_id
GROUP BY m.name
HAVING COUNT(*) > 1;


-- UPDATE

-- 1. Increase book price by 50 for books borrowed more than 3 times.


UPDATE books
SET price = price + 50
WHERE book_id IN (
SELECT book_id
FROM borrowed_books
GROUP BY book_id
HAVING COUNT(*) > 3
);

-- 2. Mark all overdue books (borrowed more than 30 days ago and not returned).


UPDATE borrowed_books
SET return_date = CURDATE()
WHERE return_date IS NULL
AND DATEDIFF(CURDATE(), borrow_date) > 30;


-- DELETE


-- 1. Delete all borrow records older than 5 years.

DELETE FROM borrowed_books
WHERE borrow_date < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);


-- 2. Delete members who never borrowed a book.


DELETE FROM members
WHERE member_id NOT IN (SELECT DISTINCT member_id FROM borrowed_books);
