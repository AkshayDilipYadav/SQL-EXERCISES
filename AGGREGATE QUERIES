| user_id | username | city | age |

| product_id | product_name | price |

| order_id | user_id | product_id | quantity | order_date |

CREATE DATABASE aggregate_exercise;
USE aggregate_exercise;

-- Users
CREATE TABLE users (
user_id INT PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(50),
city VARCHAR(50),
age INT
);

-- Products
CREATE TABLE products (
product_id INT PRIMARY KEY AUTO_INCREMENT,
product_name VARCHAR(100),
price DECIMAL(10,2)
);

-- Orders
CREATE TABLE orders (
order_id INT PRIMARY KEY AUTO_INCREMENT,
user_id INT,
product_id INT,
quantity INT,
order_date DATE,
FOREIGN KEY (user_id) REFERENCES users(user_id),
FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Sample Data
INSERT INTO users (username, city, age) VALUES
('Alice', 'Delhi', 23),
('Bob', 'Mumbai', 30),
('Charlie', 'Delhi', 28),
('David', 'Pune', 22),
('Eva', 'Mumbai', 35);

INSERT INTO products (product_name, price) VALUES
('Laptop', 70000),
('Phone', 30000),
('Tablet', 20000),
('Headphones', 5000),
('Charger', 1500);

INSERT INTO orders (user_id, product_id, quantity, order_date) VALUES
(1, 1, 1, '2025-01-05'),
(1, 2, 2, '2025-02-10'),
(2, 3, 1, '2025-03-15'),
(3, 2, 1, '2025-04-20'),
(4, 5, 3, '2025-05-10'),
(5, 1, 1, '2025-06-12');




-- BEGINNER

-- 1. COUNT total users

SELECT COUNT(*) AS total_users FROM users;

-- 2. Find the average age of users

SELECT AVG(age) AS avg_age FROM users;

-- 3. Find the minimum and maximum product price

SELECT MIN(price) AS cheapest, MAX(price) AS costliest FROM products;

-- 4. Total revenue from all orders

SELECT SUM(o.quantity * p.price) AS total_revenue
FROM orders o
JOIN products p ON o.product_id = p.product_id;







-- INTERMEDIATE


-- 1. Number of users per city

SELECT city, COUNT(*) AS user_count
FROM users
GROUP BY city;

-- 2. Total orders placed per user

SELECT u.username, COUNT(o.order_id) AS total_orders
FROM users u
LEFT JOIN orders o ON u.user_id = o.user_id
GROUP BY u.username;

-- 3. Total quantity ordered per product

SELECT p.product_name, SUM(o.quantity) AS total_quantity
FROM products p
LEFT JOIN orders o ON p.product_id = o.product_id
GROUP BY p.product_name;


-- 4. Average order quantity per user

SELECT u.username, AVG(o.quantity) AS avg_quantity
FROM users u
JOIN orders o ON u.user_id = o.user_id
GROUP BY u.username;


-- ADVANCED


-- 1. Cities with more than 1 user


SELECT city, COUNT(*) AS user_count
FROM users
GROUP BY city
HAVING COUNT(*) > 1;

-- 2. Users who spent more than 50,000 in total



SELECT u.username, SUM(o.quantity * p.price) AS total_spent
FROM users u
JOIN orders o ON u.user_id = o.user_id
JOIN products p ON o.product_id = p.product_id
GROUP BY u.username
HAVING SUM(o.quantity * p.price) > 50000;


-- 3. Find product(s) with the highest total quantity sold

SELECT product_name, SUM(o.quantity) AS total_sold
FROM products p
JOIN orders o ON p.product_id = o.product_id
GROUP BY product_name
HAVING SUM(o.quantity) = (
SELECT MAX(total_quantity)
FROM (
SELECT SUM(o.quantity) AS total_quantity
FROM orders o
GROUP BY o.product_id
) AS sub
);


-- 4. Monthly revenue summary

SELECT DATE_FORMAT(order_date, '%Y-%m') AS month,
SUM(o.quantity * p.price) AS monthly_revenue
FROM orders o
JOIN products p ON o.product_id = p.product_id
GROUP BY DATE_FORMAT(order_date, '%Y-%m')
ORDER BY month;

-- 5. Average spending per city


SELECT u.city, AVG(user_spending) AS avg_city_spending
FROM (
SELECT u.user_id, u.city, SUM(o.quantity * p.price) AS user_spending
FROM users u
JOIN orders o ON u.user_id = o.user_id
JOIN products p ON o.product_id = p.product_id
GROUP BY u.user_id, u.city
) AS spending
GROUP BY city;



